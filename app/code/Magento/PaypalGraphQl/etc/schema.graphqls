# Copyright Â© Magento, Inc. All rights reserved.
# See COPYING.txt for license details.

type Query {
    getPayflowLinkToken(input: PayflowLinkTokenInput!): PayflowLinkToken @resolver(class: "\\Magento\\PaypalGraphQl\\Model\\Resolver\\PayflowLinkToken") @doc(description: "Retrieve PayPal payment credentials for Payflow transaction.")
}

type Mutation {
    createPaypalExpressToken(input: PaypalExpressTokenInput!): PaypalExpressToken @resolver(class: "\\Magento\\PaypalGraphQl\\Model\\Resolver\\PaypalExpressToken") @doc(description:"Initiates a PayPal checkout transaction and receives a token.")
    createPayflowProToken(input: PayflowProTokenInput!): PayflowProToken @resolver(class: "\\Magento\\PaypalGraphQl\\Model\\Resolver\\PayflowProToken") @doc(description: "Initiates a PayFlowPro transaction and receives a token")
    handlePayflowProResponse(input: PayflowProResponseInput!): PayflowProResponseOutput @resolver(class: "\\Magento\\PaypalGraphQl\\Model\\Resolver\\PayflowProResponse") @doc(description: "Handles PayFlowPro response and saves payment in Quote")
}

input PaypalExpressTokenInput @doc(description:"Defines the attributes required to receive a payment token from PayPal") {
    cart_id: String! @doc(description:"The unique ID that identifies the customer's cart")
    code: String! @doc(description:"Payment method code")
    urls: PaypalExpressUrlsInput! @doc(description:"A set of URLs that PayPal uses to respond to a token request")
    use_paypal_credit: Boolean @doc(description: "Indicates whether the buyer clicked the PayPal credit button. The default value is false")
    express_button: Boolean @doc(description: "Indicates whether the buyer selected the quick checkout button. The default value is false")
}

type PaypalExpressToken @doc(description: "Contains the token returned by PayPal and a set of URLs that allow the buyer to authorize payment and adjust checkout details") {
    token: String @doc(description:"The token returned by PayPal")
    paypal_urls: PaypalExpressUrlList @doc(description:"A set of URLs that allow the buyer to authorize payment and adjust checkout details")
}

type PayflowLinkToken {
    secure_token: String @doc(description:"Secure token generated by PayPal")
    secure_token_id: String @doc(description:"Secure token ID generated by PayPal")
    mode: PayflowLinkMode @doc(description:"Mode for Payflow transaction")
    paypal_url: String @doc(description:"PayPal URL used for requesting Payflow form")
}

input PaymentMethodInput {
    paypal_express: PaypalExpressInput @doc(description:"Required input for PayPal Express Checkout payments")
    payflow_express: PayflowExpressInput @doc(description:"Required input for PayPal Payflow Express Checkout payments")
    payflow_link: PayflowLinkAdditionalDataInput @doc(description:"Required input for PayPal Payflow Link payments")
    payflowpro: PayflowProInput @doc(description: "Required input type for Paypal payflow pro payments")
}

input PaypalExpressInput @doc(description:"Required input for PayPal Express Checkout payments") {
    payer_id: String! @doc(description:"The unique ID of the PayPal user")
    token: String! @doc(description:"The token returned by the createPaypalExpressToken mutation")
}

input PayflowExpressInput @doc(description:"Required input for PayPal Payflow Express Checkout payments") {
    payer_id: String! @doc(description:"The unique ID of the PayPal user")
    token: String! @doc(description:"The token returned by the createPaypalExpressToken mutation")
}

input PaypalExpressUrlsInput @doc(description:"A set of URLs that PayPal uses to respond to a token request") {
    return_url: String! @doc(description:"The URL of the final review page on your website where the buyer confirms the order and payment")
    cancel_url: String! @doc(description:"The URL of the original page on your website where the buyer initially chose PayPal as a payment type")
    success_url: String @doc(description:"The URL to redirect upon success. Not applicable to most PayPal solutions")
    pending_url: String @doc(description:"The URL to redirect for a pending transactions. Not applicable to most PayPal solutions")
}

type PaypalExpressUrlList @doc(description:"A set of URLs that allow the buyer to authorize payment and adjust checkout details") {
    start: String @doc(description:"The URL to the PayPal login page")
    edit: String @doc(description:"The PayPal URL that allows the buyer to edit their checkout details")
}

input PayflowLinkAdditionalDataInput {
    return_url: String! @doc(description:"The URL PayPal will redirect back to upon payment success")
    cancel_url: String! @doc(description:"The URL PayPal will redirect back to upon payment cancellation")
    error_url: String! @doc(description:"The URL PayPal will redirect back to upon payment error")
}

input PayflowLinkTokenInput {
    cart_id: String! @doc(description:"The unique ID that identifies the customer's cart")
}

enum PayflowLinkMode @doc(description:"Mode for Payflow Link payment: TEST or LIVE") {
    TEST
    LIVE
}

input PayflowProTokenInput {
     cart_id: String! @doc(description:"The unique ID that identifies the customer's cart")
     urls: PayflowProUrlInput! @doc(description:"URL that PayPal uses for callback.")
}

input PayflowProInput {
    cc_details: CreditCardDetailsInput! @doc(description: "Required input for credit card related information")
}

input CreditCardDetailsInput {
    cc_type: String! @doc(description: "Credit card type")
    cc_exp_year: Int! @doc(description: "Credit card expiration year")
    cc_exp_month: Int! @doc(description: "Credit card expiration month")
    cc_last_4: Int! @doc(description: "Last 4 digits of the credit card")
}

input PayflowProUrlInput {
    return_url: String! @doc(description:"The URL of the final review page on your website where the buyer confirms the order and payment")
    cancel_url: String! @doc(description:"The URL of the original page on your website where the buyer initially chose PayPal as a payment type")
    error_url: String! @doc(description:"The URL of the page on your website where any error in the transaction is handled")
}

type PayflowProToken {
    secure_token: String!
    secure_token_id: String!
    response_message: String!
    result: Int!
    result_code: Int!
}

input PayflowProResponseInput {
    cart_id: String!
    paypal_payload: String!
}

type PayflowProResponseOutput {
    cart: Cart!
}
