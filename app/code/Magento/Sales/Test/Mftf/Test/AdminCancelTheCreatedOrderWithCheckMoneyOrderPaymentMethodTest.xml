<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="AdminCancelTheCreatedOrderWithCheckMoneyOrderPaymentMethodTest">
        <annotations>
            <group value="Sales"/>
            <stories value="Cancel Created Order"/>
            <title value="Cancel the created order with check/money order payment method"/>
            <description value=" Create an order with check/money order payment method and cancel the order"/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-16066"/>
            <group value="mtf_migrated"/>
        </annotations>

        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>

            <!--Set default flat rate shipping method settings-->
            <createData entity="FlatRateShippingMethodDefault" stepKey="setDefaultFlatRateShippingMethod"/>

            <!--Create simple customer-->
            <createData entity="Simple_US_Customer_CA" stepKey="simpleCustomer"/>

            <!-- Create the category -->
            <createData entity="ApiCategory" stepKey="createCategory"/>

            <!-- Create Virtual Product -->
            <createData entity="VirtualProduct" stepKey="virtualProduct">
                <field key="price">10.00</field>
            </createData>

            <!-- Create Simple Product -->
            <createData entity="ApiSimplePrice10Qty10" stepKey="simpleProduct">
                <requiredEntity createDataKey="createCategory"/>
                <field key="price">10.00</field>
            </createData>

            <!--Create Bundle product-->
            <createData entity="SimpleProduct2" stepKey="simpleProduct1">
                <field key="price">10.00</field>
            </createData>
            <createData entity="BundleProductPriceViewRange" stepKey="createBundleProduct">
                <requiredEntity createDataKey="createCategory"/>
            </createData>
            <createData entity="DropDownBundleOption" stepKey="createBundleOption1_1">
                <requiredEntity createDataKey="createBundleProduct"/>
                <field key="required">True</field>
            </createData>
            <createData entity="ApiBundleLink" stepKey="linkOptionToProduct">
                <requiredEntity createDataKey="createBundleProduct"/>
                <requiredEntity createDataKey="createBundleOption1_1"/>
                <requiredEntity createDataKey="simpleProduct1"/>
            </createData>

            <!-- Create configurable product and add it to the category -->
            <createData entity="ApiConfigurableProduct" stepKey="createConfigProduct">
                <requiredEntity createDataKey="createCategory"/>
            </createData>

            <!-- Create an attribute with two options to be used in the first child product -->
            <createData entity="productAttributeWithTwoOptions" stepKey="createConfigProductAttribute"/>
            <createData entity="productAttributeOption1" stepKey="createConfigProductAttributeOption1">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </createData>

            <!-- Add the attribute we just created to default attribute set -->
            <createData entity="AddToDefaultSet" stepKey="createConfigAddToAttributeSet">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </createData>

            <!-- Get the option of the attribute we created -->
            <getData entity="ProductAttributeOptionGetter" index="1" stepKey="getConfigAttributeOption1">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </getData>

            <!-- Create a simple product and give it the attribute with option -->
            <createData entity="ApiSimpleOne" stepKey="createConfigChildProduct1">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
                <requiredEntity createDataKey="getConfigAttributeOption1"/>
            </createData>

            <!-- Create the configurable product -->
            <createData entity="ConfigurableProductTwoOptions" stepKey="createConfigProductOption">
                <requiredEntity createDataKey="createConfigProduct"/>
                <requiredEntity createDataKey="createConfigProductAttribute"/>
                <requiredEntity createDataKey="getConfigAttributeOption1"/>
            </createData>

            <!-- Add simple product to the configurable product -->
            <createData entity="ConfigurableProductAddChild" stepKey="createConfigProductAddChild1">
                <requiredEntity createDataKey="createConfigProduct"/>
                <requiredEntity createDataKey="createConfigChildProduct1"/>
            </createData>
            <magentoCLI command="indexer:reindex" stepKey="reindex"/>
            <magentoCLI command="cache:flush" stepKey="flushCache"/>
        </before>
        <after>
            <deleteData createDataKey="simpleCustomer" stepKey="deleteSimpleCustomer"/>
            <deleteData createDataKey="simpleProduct" stepKey="deleteSimpleProduct"/>
            <deleteData createDataKey="virtualProduct" stepKey="deleteVirtualProduct"/>
            <deleteData createDataKey="simpleProduct1" stepKey="deleteSimpleProduct1"/>
            <deleteData createDataKey="createBundleProduct" stepKey="deleteBundleProduct"/>
            <deleteData createDataKey="createConfigChildProduct1" stepKey="deleteConfigChildProduct"/>
            <deleteData createDataKey="createConfigProduct" stepKey="deleteConfigurableProduct"/>
            <deleteData createDataKey="createConfigProductAttribute" stepKey="deleteProductAttribute"/>
            <deleteData createDataKey="createCategory" stepKey="deleteCategory"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>

        <!--Create new customer order-->
        <actionGroup ref="navigateToNewOrderPageExistingCustomer" stepKey="navigateToNewOrderWithExistingCustomer">
            <argument name="customer" value="$$simpleCustomer$$"/>
        </actionGroup>

        <!--Add bundle product to order and check product price in grid-->
        <actionGroup ref="addBundleProductToOrder" stepKey="addBundleProductToOrder">
            <argument name="product" value="$$createBundleProduct$$"/>
            <argument name="quantity" value="1"/>
        </actionGroup>

        <!--Add configurable product to order-->
        <actionGroup ref="newAddConfigurableProductToOrder" stepKey="addConfigurableProductToOrder">
            <argument name="product" value="$$createConfigProduct$$"/>
            <argument name="attribute" value="$$createConfigProductAttribute$$"/>
            <argument name="option" value="$$getConfigAttributeOption1$$"/>
        </actionGroup>

        <!--Add Simple product to order-->
        <actionGroup ref="addSimpleProductToOrder" stepKey="addSimpleProductToTheOrder">
            <argument name="product" value="$$simpleProduct$$"/>
        </actionGroup>

        <!--Add Virtual product to order-->
        <actionGroup ref="addSimpleProductToOrder" stepKey="addVirtualProductToTheOrder">
            <argument name="product" value="$$virtualProduct$$"/>
        </actionGroup>

        <!--Select FlatRate shipping method-->
        <actionGroup ref="AdminSelectFlatRateShippingMethodActionGroup" stepKey="selectFlatRateShippingMethod"/>

        <!-- Submit order -->
        <click selector="{{AdminOrderFormActionSection.SubmitOrder}}" stepKey="submitOrder"/>

        <!--Verify order information-->
        <actionGroup ref="verifyCreatedOrderInformation" stepKey="verifyCreatedOrderInformation"/>
        <grabTextFrom selector="|Order # (\d+)|" stepKey="orderId"/>

        <!-- Cancel the Order -->
        <actionGroup ref="cancelPendingOrder" stepKey="cancelPendingOrder"/>

        <!-- Assert Simple Product Quantity in backend after order Canceled -->
        <actionGroup ref="filterAndSelectProduct" stepKey="filterAndSelectTheProduct">
            <argument name="productSku" value="$$simpleProduct.sku$$"/>
        </actionGroup>
        <waitForElementVisible selector="{{AdminProductFormSection.productName}}" stepKey="waitForProductDetailsToLoad"/>
        <seeInField selector="{{AdminProductFormSection.productName}}" userInput="$$simpleProduct.name$$" stepKey="seeProductName"/>
        <seeInField selector="{{AdminProductFormSection.productQuantity}}" userInput="10" stepKey="seeProductQuantity"/>
        <seeInField selector="{{AdminProductFormSection.productStockStatus}}" userInput="In Stock" stepKey="seeProductStockStatus"/>

        <!-- Assert Virtual Product Quantity in backend after order canceled-->
        <actionGroup ref="filterAndSelectProduct" stepKey="filterAndSelectTheVirtualProduct">
            <argument name="productSku" value="$$virtualProduct.sku$$"/>
        </actionGroup>
        <waitForElementVisible selector="{{AdminProductFormSection.productName}}" stepKey="waitForProductDetailsToLoad1"/>
        <seeInField selector="{{AdminProductFormSection.productName}}" userInput="$$virtualProduct.name$$" stepKey="seeVirtualProductName"/>
        <seeInField selector="{{AdminProductFormSection.productQuantity}}" userInput="1000" stepKey="seeVirtualProductQuantity"/>
        <seeInField selector="{{AdminProductFormSection.productStockStatus}}" userInput="In Stock" stepKey="seeVirtualProductStockStatus"/>

        <!-- Assert Bundle Product quantity in backend after order canceled-->
        <actionGroup ref="filterAndSelectProduct" stepKey="filterAndSelectTheBundleProduct">
            <argument name="productSku" value="$$simpleProduct1.sku$$"/>
        </actionGroup>
        <waitForElementVisible selector="{{AdminProductFormSection.productName}}" stepKey="waitForProductDetailsToLoad2"/>
        <seeInField selector="{{AdminProductFormSection.productName}}" userInput="$$simpleProduct1.name$$" stepKey="seeBundleProductName"/>
        <seeInField selector="{{AdminProductFormSection.productQuantity}}" userInput="1000" stepKey="seeBundleProductQuantity"/>
        <seeInField selector="{{AdminProductFormSection.productStockStatus}}" userInput="In Stock" stepKey="seeBundleProductStockStatus"/>

        <!-- Assert Configurable Product quantity in backend after order canceled-->
        <actionGroup ref="filterAndSelectProduct" stepKey="filterAndSelectTheConfigProduct">
            <argument name="productSku" value="$$createConfigChildProduct1.sku$$"/>
        </actionGroup>
        <waitForElementVisible selector="{{AdminProductFormSection.productName}}" stepKey="waitForProductDetailsToLoad3"/>
        <seeInField selector="{{AdminProductFormSection.productName}}" userInput="$$createConfigChildProduct1.name$$" stepKey="seeConfigProductName"/>
        <seeInField selector="{{AdminProductFormSection.productQuantity}}" userInput="1000" stepKey="seeConfigProductQuantity"/>
        <seeInField selector="{{AdminProductFormSection.productStockStatus}}" userInput="In Stock" stepKey="seeConfigProductStockStatus"/>

        <!-- Open Order Index Page -->
        <amOnPage url="{{AdminOrdersPage.url}}" stepKey="goToOrders"/>
        <waitForPageLoad stepKey="waitForPageLoad5"/>

        <!-- Filter order using orderId -->
        <actionGroup ref="filterOrderGridById" stepKey="filterOrderGridById">
            <argument name="orderId" value="$orderId"/>
        </actionGroup>
        <see selector="{{AdminOrdersGridSection.firstRow}}" userInput="$orderId" stepKey="seeOrderIdInGrid"/>
        <see selector="{{AdminOrdersGridSection.firstRow}}" userInput="Canceled" stepKey="seeStatusInGrid"/>

        <!--Log in to Storefront as Customer  -->
        <actionGroup ref="LoginToStorefrontActionGroup" stepKey="signUp">
            <argument name="Customer" value="$$simpleCustomer$$"/>
        </actionGroup>

        <!-- Assert Order status in frontend order grid -->
        <click selector="{{StorefrontCustomerSidebarSection.sidebarCurrentTab('My Orders')}}" stepKey="clickOnMyOrders"/>
        <waitForPageLoad stepKey="waitForOrderDetailsToLoad"/>
        <seeElement selector="{{StorefrontCustomerOrderViewSection.orderStatusInGrid('$orderId', 'Canceled')}}" stepKey="seeOrderStatusInGrid"/>
    </test>
</tests>