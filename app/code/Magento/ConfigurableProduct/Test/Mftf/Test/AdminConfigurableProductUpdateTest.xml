<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="AdminConfigurableProductBulkUpdateTest">
        <annotations>
            <features value="ConfigurableProduct"/>
            <stories value="Create, Read, Update, Delete"/>
            <title value="admin should be able to bulk update attributes of configurable products"/>
            <description value="admin should be able to bulk update attributes of configurable products"/>
            <testCaseId value="MC-88"/>
            <group value="ConfigurableProduct"/>
            <severity value="AVERAGE"/>
        </annotations>

        <before>
            <createData entity="ApiCategory" stepKey="createCategory"/>
            <createData entity="ApiConfigurableProduct" stepKey="createProduct1">
                <requiredEntity createDataKey="createCategory"/>
            </createData>
            <createData entity="ApiConfigurableProduct" stepKey="createProduct2">
                <requiredEntity createDataKey="createCategory"/>
            </createData>
            <createData entity="ApiConfigurableProduct" stepKey="createProduct3">
                <requiredEntity createDataKey="createCategory"/>
            </createData>
            <actionGroup ref="LoginAsAdmin" stepKey="login"/>
        </before>

        <after>
            <deleteData createDataKey="createCategory" stepKey="deleteCategory"/>
            <deleteData createDataKey="createProduct1" stepKey="deleteFirstProduct"/>
            <deleteData createDataKey="createProduct2" stepKey="deleteSecondProduct"/>
            <deleteData createDataKey="createProduct3" stepKey="deleteThirdProduct"/>
            <amOnPage url="{{AdminProductIndexPage.url}}" stepKey="goToProductList"/>
            <waitForPageLoad stepKey="waitForPageLoad"/>
            <actionGroup ref="clearFiltersAdminDataGrid" stepKey="clearProductsGridFilters"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>

        <!-- Search for prefix of the 3 products we created via api -->
        <amOnPage url="{{AdminProductIndexPage.url}}" stepKey="goToProductList"/>
        <waitForPageLoad stepKey="wait1"/>
        <conditionalClick selector="{{AdminProductGridFilterSection.clearAll}}" dependentSelector="{{AdminProductGridFilterSection.clearAll}}" visible="true" stepKey="clearAll"/>
        <actionGroup ref="searchProductGridByKeyword" stepKey="searchForProduct">
            <argument name="keyword" value="ApiConfigurableProduct.name"/>
        </actionGroup>

        <!-- Select all, then start the bulk update attributes flow -->
        <click selector="{{AdminProductGridSection.multicheckDropdown}}" stepKey="openMulticheckDropdown"/>
        <click selector="{{AdminProductGridSection.multicheckOption('Select All')}}" stepKey="selectAllProductInFilteredGrid"/>
        <click selector="{{AdminProductGridSection.bulkActionDropdown}}" stepKey="clickActionDropdown"/>
        <click selector="{{AdminProductGridSection.bulkActionOption('Update attributes')}}" stepKey="clickBulkUpdate"/>
        <waitForPageLoad stepKey="wait2"/>

        <!-- Update the description -->
        <click selector="{{AdminUpdateAttributesSection.toggleDescription}}" stepKey="clickToggleDescription"/>
        <fillField selector="{{AdminUpdateAttributesSection.description}}" userInput="MFTF automation!" stepKey="fillDescription"/>
        <click selector="{{AdminEditProductAttributesSection.Save}}" stepKey="clickSave"/>
        <waitForElementVisible selector="{{AdminProductMessagesSection.successMessage}}" time="60" stepKey="waitForSuccessMessage"/>
        <see selector="{{AdminProductMessagesSection.successMessage}}" userInput="Message is added to queue" stepKey="seeAttributeUpdateSuccessMsg"/>

        <!-- Run cron twice -->
        <magentoCLI command="cron:run" arguments="--group=consumers" stepKey="runCron1"/>
        <magentoCLI command="cron:run" arguments="--group=consumers" stepKey="runCron2"/>
        <magentoCLI command="indexer:reindex" stepKey="reindex"/>

        <!-- Check storefront for description -->
        <amOnPage url="{{StorefrontProductPage.url($$createProduct1.custom_attributes[url_key]$$)}}" stepKey="goToFirstProductPageOnStorefront"/>
        <waitForPageLoad stepKey="waitForFirstProductPageLoad"/>
        <see selector="{{StorefrontProductInfoMainSection.productDescription}}" userInput="MFTF automation!" stepKey="seeFirstDescription"/>
        <amOnPage url="{{StorefrontProductPage.url($$createProduct2.custom_attributes[url_key]$$)}}" stepKey="goToSecondProductPageOnStorefront"/>
        <waitForPageLoad stepKey="waitForSecondProductPageLoad"/>
        <see selector="{{StorefrontProductInfoMainSection.productDescription}}" userInput="MFTF automation!" stepKey="seeSecondDescription"/>
        <amOnPage url="{{StorefrontProductPage.url($$createProduct3.custom_attributes[url_key]$$)}}" stepKey="goToThirdProductPageOnStorefront"/>
        <waitForPageLoad stepKey="waitForThirdProductPageLoad"/>
        <see selector="{{StorefrontProductInfoMainSection.productDescription}}" userInput="MFTF automation!" stepKey="seeThirdDescription"/>
    </test>

    <test name="AdminConfigurableProductRemoveAnOptionTest">
        <annotations>
            <features value="ConfigurableProduct"/>
            <stories value="Create, Read, Update, Delete"/>
            <title value="Admin should be able to remove a product configuration"/>
            <description value="Admin should be able to remove a product configuration"/>
            <testCaseId value="MC-63"/>
            <group value="ConfigurableProduct"/>
            <severity value="AVERAGE"/>
        </annotations>

        <before>
            <!-- This was copied and modified from the EndToEndB2CGuestUserTest -->
            <createData entity="ApiCategory" stepKey="createCategory"/>
            <createData entity="ApiConfigurableProduct" stepKey="createConfigProduct">
                <requiredEntity createDataKey="createCategory"/>
            </createData>
            <createData entity="productAttributeWithTwoOptions" stepKey="createConfigProductAttribute"/>
            <createData entity="productAttributeOption1" stepKey="createConfigProductAttributeOption1">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </createData>
            <createData entity="productAttributeOption2" stepKey="createConfigProductAttributeOption2">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </createData>
            <createData entity="AddToDefaultSet" stepKey="createConfigAddToAttributeSet">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </createData>
            <getData entity="ProductAttributeOptionGetter" index="1" stepKey="getConfigAttributeOption1">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </getData>
            <getData entity="ProductAttributeOptionGetter" index="2" stepKey="getConfigAttributeOption2">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </getData>
            <createData entity="ApiSimpleOne" stepKey="createConfigChildProduct1">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
                <requiredEntity createDataKey="getConfigAttributeOption1"/>
            </createData>
            <createData entity="ApiSimpleTwo" stepKey="createConfigChildProduct2">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
                <requiredEntity createDataKey="getConfigAttributeOption2"/>
            </createData>
            <createData entity="ConfigurableProductTwoOptions" stepKey="createConfigProductOption">
                <requiredEntity createDataKey="createConfigProduct"/>
                <requiredEntity createDataKey="createConfigProductAttribute"/>
                <requiredEntity createDataKey="getConfigAttributeOption1"/>
                <requiredEntity createDataKey="getConfigAttributeOption2"/>
            </createData>
            <createData entity="ConfigurableProductAddChild" stepKey="createConfigProductAddChild1">
                <requiredEntity createDataKey="createConfigProduct"/>
                <requiredEntity createDataKey="createConfigChildProduct1"/>
            </createData>
            <createData entity="ConfigurableProductAddChild" stepKey="createConfigProductAddChild2">
                <requiredEntity createDataKey="createConfigProduct"/>
                <requiredEntity createDataKey="createConfigChildProduct2"/>
            </createData>
        </before>

        <after>
            <deleteData createDataKey="createConfigChildProduct1" stepKey="deleteConfigChildProduct1"/>
            <deleteData createDataKey="createConfigChildProduct2" stepKey="deleteConfigChildProduct2"/>
            <deleteData createDataKey="createConfigProduct" stepKey="deleteConfigProduct"/>
            <deleteData createDataKey="createConfigProductAttribute" stepKey="deleteConfigProductAttribute"/>
        </after>

        <!--check storefront for both options-->
        <amOnPage url="$$createConfigProduct.sku$$.html" stepKey="amOnStorefront1"/>
        <waitForPageLoad stepKey="wait1"/>
        <see selector="{{StorefrontProductInfoMainSection.productAttributeOptions1}}" userInput="option1" stepKey="seeOption1Storefront"/>
        <see selector="{{StorefrontProductInfoMainSection.productAttributeOptions1}}" userInput="option2" stepKey="seeOption2Storefront"/>

        <!--check admin for both options-->
        <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
        <amOnPage url="{{AdminProductEditPage.url($$createConfigProduct.id$$)}}" stepKey="goToEditPage"/>
        <waitForPageLoad stepKey="wait2"/>
        <see selector="{{AdminProductFormConfigurationsSection.currentVariationsNameCells}}" userInput="$$createConfigChildProduct1.name$$" stepKey="seeOption1Admin"/>
        <see selector="{{AdminProductFormConfigurationsSection.currentVariationsNameCells}}" userInput="$$createConfigChildProduct2.name$$" stepKey="seeOption2Admin"/>

        <!--remove an option-->
        <click selector="{{AdminProductFormConfigurationsSection.actionsBtn('1')}}" stepKey="clickToExpandActions"/>
        <click selector="{{AdminProductFormConfigurationsSection.removeProductBtn}}" stepKey="clickRemove"/>
        <click selector="{{AdminProductFormActionSection.saveButton}}" stepKey="clickSave"/>
        <waitForPageLoad stepKey="wait3"/>

        <!--check admin for one option-->
        <dontSee selector="{{AdminProductFormConfigurationsSection.currentVariationsNameCells}}" userInput="$$createConfigChildProduct1.name$$" stepKey="dontSeeOption1Admin"/>

        <!--check storefront for one option-->
        <amOnPage url="$$createConfigProduct.sku$$.html" stepKey="amOnStorefront2"/>
        <waitForPageLoad stepKey="wait4"/>
        <dontSee selector="{{StorefrontProductInfoMainSection.productAttributeOptions1}}" userInput="option1" stepKey="dontSeeOption1InStorefront"/>
        <see selector="{{StorefrontProductInfoMainSection.productAttributeOptions1}}" userInput="option2" stepKey="seeOption2Again"/>
    </test>

    <test name="AdminConfigurableProductDisableAnOptionTest">
        <annotations>
            <features value="ConfigurableProduct"/>
            <stories value="Create, Read, Update, Delete"/>
            <title value="Admin should be able to disable a product configuration"/>
            <description value="Admin should be able to disable a product configuration"/>
            <testCaseId value="MC-119"/>
            <group value="ConfigurableProduct"/>
            <severity value="AVERAGE"/>
        </annotations>

        <before>
            <!-- This was copied and modified from the EndToEndB2CGuestUserTest -->
            <createData entity="ApiCategory" stepKey="createCategory"/>
            <createData entity="ApiConfigurableProduct" stepKey="createConfigProduct">
                <requiredEntity createDataKey="createCategory"/>
            </createData>
            <createData entity="productAttributeWithTwoOptions" stepKey="createConfigProductAttribute"/>
            <createData entity="productAttributeOption1" stepKey="createConfigProductAttributeOption1">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </createData>
            <createData entity="productAttributeOption2" stepKey="createConfigProductAttributeOption2">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </createData>
            <createData entity="AddToDefaultSet" stepKey="createConfigAddToAttributeSet">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </createData>
            <getData entity="ProductAttributeOptionGetter" index="1" stepKey="getConfigAttributeOption1">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </getData>
            <getData entity="ProductAttributeOptionGetter" index="2" stepKey="getConfigAttributeOption2">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </getData>
            <createData entity="ApiSimpleOne" stepKey="createConfigChildProduct1">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
                <requiredEntity createDataKey="getConfigAttributeOption1"/>
            </createData>
            <createData entity="ApiSimpleTwo" stepKey="createConfigChildProduct2">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
                <requiredEntity createDataKey="getConfigAttributeOption2"/>
            </createData>
            <createData entity="ConfigurableProductTwoOptions" stepKey="createConfigProductOption">
                <requiredEntity createDataKey="createConfigProduct"/>
                <requiredEntity createDataKey="createConfigProductAttribute"/>
                <requiredEntity createDataKey="getConfigAttributeOption1"/>
                <requiredEntity createDataKey="getConfigAttributeOption2"/>
            </createData>
            <createData entity="ConfigurableProductAddChild" stepKey="createConfigProductAddChild1">
                <requiredEntity createDataKey="createConfigProduct"/>
                <requiredEntity createDataKey="createConfigChildProduct1"/>
            </createData>
            <createData entity="ConfigurableProductAddChild" stepKey="createConfigProductAddChild2">
                <requiredEntity createDataKey="createConfigProduct"/>
                <requiredEntity createDataKey="createConfigChildProduct2"/>
            </createData>
        </before>

        <after>
            <deleteData createDataKey="createConfigChildProduct1" stepKey="deleteConfigChildProduct1"/>
            <deleteData createDataKey="createConfigChildProduct2" stepKey="deleteConfigChildProduct2"/>
            <deleteData createDataKey="createConfigProduct" stepKey="deleteConfigProduct"/>
            <deleteData createDataKey="createConfigProductAttribute" stepKey="deleteConfigProductAttribute"/>
        </after>

        <!--check storefront for both options-->
        <amOnPage url="$$createConfigProduct.sku$$.html" stepKey="amOnStorefront1"/>
        <waitForPageLoad stepKey="wait1"/>
        <see selector="{{StorefrontProductInfoMainSection.productAttributeOptions1}}" userInput="option1" stepKey="seeOption1Storefront"/>
        <see selector="{{StorefrontProductInfoMainSection.productAttributeOptions1}}" userInput="option2" stepKey="seeOption2Storefront"/>

        <!--go to admin and disable an option-->
        <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
        <amOnPage url="{{AdminProductEditPage.url($$createConfigProduct.id$$)}}" stepKey="goToEditPage"/>
        <waitForPageLoad stepKey="wait2"/>
        <click selector="{{AdminProductFormConfigurationsSection.actionsBtn('1')}}" stepKey="clickToExpandActions"/>
        <click selector="{{AdminProductFormConfigurationsSection.disableProductBtn}}" stepKey="clickDisable"/>
        <click selector="{{AdminProductFormActionSection.saveButton}}" stepKey="clickSave"/>
        <waitForPageLoad stepKey="wait3"/>

        <!--check storefront for one option-->
        <amOnPage url="$$createConfigProduct.sku$$.html" stepKey="amOnStorefront2"/>
        <waitForPageLoad stepKey="wait4"/>
        <dontSee selector="{{StorefrontProductInfoMainSection.productAttributeOptions1}}" userInput="option1" stepKey="dontSeeOption1InStorefront"/>
        <see selector="{{StorefrontProductInfoMainSection.productAttributeOptions1}}" userInput="option2" stepKey="seeOption2Again"/>
    </test>

    <test name="AdminConfigurableProductRemoveConfigurationTest">
        <annotations>
            <features value="ConfigurableProduct"/>
            <stories value="Edit a configurable product in admin"/>
            <title value="Admin should be able to remove a configuration from a Configurable Product"/>
            <description value="Admin should be able to remove a configuration from a Configurable Product"/>
            <severity value="AVERAGE"/>
            <testCaseId value="MC-86"/>
            <group value="ConfigurableProduct"/>
        </annotations>

        <before>
            <createData entity="ApiCategory" stepKey="createCategory"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
        </before>

        <after>
            <deleteData createDataKey="createCategory" stepKey="deleteCategory"/>
            <actionGroup ref="logout" stepKey="adminLogout"/>
        </after>

        <!-- Create a configurable product via the UI -->
        <actionGroup ref="createConfigurableProduct" stepKey="createProduct">
            <argument name="product" value="_defaultProduct"/>
            <argument name="category" value="$$createCategory$$"/>
        </actionGroup>

        <!--
            After saving, we are still on the product edit page. There is no need to reload or go to this page
            again, because a round trip to the server has already happened.
        -->

        <!-- Remove a configuration option from the configurable product -->
        <click selector="{{AdminProductFormConfigurationsSection.createConfigurations}}" stepKey="clickEditConfigurations"/>
        <click selector="{{AdminCreateProductConfigurationsPanel.next}}" stepKey="clickOnNextButton1"/>
        <click selector="{{AdminCreateProductConfigurationsPanel.attributeCheckboxByIndex('1')}}" stepKey="deselectOption"/>
        <click selector="{{AdminCreateProductConfigurationsPanel.next}}" stepKey="clickOnNextButton2"/>
        <click selector="{{AdminCreateProductConfigurationsPanel.next}}" stepKey="clickOnNextButton3"/>
        <click selector="{{AdminCreateProductConfigurationsPanel.next}}" stepKey="clickOnNextButton4"/>
        <click selector="{{AdminProductFormActionSection.saveButton}}" stepKey="saveProduct"/>

        <!-- Verify that the removed option is not present in the storefront -->
        <amOnPage url="{{StorefrontProductPage.url(_defaultProduct.urlKey)}}" stepKey="amOnStorefrontPage"/>
        <waitForPageLoad stepKey="waitForStorefrontPage"/>
        <dontSee selector="{{StorefrontProductInfoMainSection.productAttributeOptions1}}" userInput="{{colorProductAttribute1.name}}" stepKey="seeInDropDown1"/>
        <see selector="{{StorefrontProductInfoMainSection.productAttributeOptions1}}" userInput="{{colorProductAttribute2.name}}" stepKey="seeInDropDown2"/>
        <see selector="{{StorefrontProductInfoMainSection.productAttributeOptions1}}" userInput="{{colorProductAttribute3.name}}" stepKey="seeInDropDown3"/>
    </test>

    <test name="AdminConfigurableProductAddConfigurationTest">
        <annotations>
            <features value="ConfigurableProduct"/>
            <stories value="Edit a configurable product in admin"/>
            <title value="Admin should be able to edit configuration to add a value to an existing attribute"/>
            <description value="Admin should be able to edit configuration to add a value to an existing attribute"/>
            <severity value="AVERAGE"/>
            <testCaseId value="MC-95"/>
            <group value="ConfigurableProduct"/>
        </annotations>

        <before>
            <createData entity="ApiCategory" stepKey="createCategory"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
        </before>

        <after>
            <deleteData createDataKey="createCategory" stepKey="deleteCategory"/>
            <actionGroup ref="logout" stepKey="adminLogout"/>
        </after>

        <!-- Create a configurable product via the UI -->
        <actionGroup ref="createConfigurableProduct" stepKey="createProduct">
            <argument name="product" value="_defaultProduct"/>
            <argument name="category" value="$$createCategory$$"/>
        </actionGroup>

        <!--
            After saving, we are still on the product edit page. There is no need to reload or go to this page
            again, because a round trip to the server has already happened.
        -->

        <!-- Add a configuration option to the configurable product -->
        <click selector="{{AdminProductFormConfigurationsSection.createConfigurations}}" stepKey="clickEditConfigurations"/>
        <click selector="{{AdminCreateProductConfigurationsPanel.next}}" stepKey="clickOnNextButton1"/>
        <waitForElementVisible selector="{{AdminCreateProductConfigurationsPanel.createNewValue}}" stepKey="waitCreateNewValueAppears"/>
        <click selector="{{AdminCreateProductConfigurationsPanel.createNewValue}}" stepKey="clickOnCreateNewValue1"/>
        <fillField userInput="{{colorProductAttribute4.name}}" selector="{{AdminCreateProductConfigurationsPanel.attributeName}}" stepKey="fillFieldForNewAttribute1"/>
        <click selector="{{AdminCreateProductConfigurationsPanel.saveAttribute}}" stepKey="clickOnSaveNewAttribute1"/>
        <click selector="{{AdminCreateProductConfigurationsPanel.next}}" stepKey="clickOnNextButton2"/>
        <click selector="{{AdminCreateProductConfigurationsPanel.applySingleQuantityToEachSkus}}" stepKey="clickOnApplySingleQuantityToEachSku"/>
        <fillField selector="{{AdminCreateProductConfigurationsPanel.quantity}}" userInput="42" stepKey="enterAttributeQuantity"/>
        <click selector="{{AdminCreateProductConfigurationsPanel.next}}" stepKey="clickOnNextButton3"/>
        <click selector="{{AdminCreateProductConfigurationsPanel.next}}" stepKey="clickOnNextButton4"/>
        <click selector="{{AdminProductFormActionSection.saveButton}}" stepKey="saveProduct"/>

        <!-- Verify that the added option is present in the storefront -->
        <amOnPage url="{{StorefrontProductPage.url(_defaultProduct.urlKey)}}" stepKey="amOnStorefrontPage"/>
        <waitForPageLoad stepKey="waitForStorefrontPage"/>
        <see selector="{{StorefrontProductInfoMainSection.productAttributeOptions1}}" userInput="{{colorProductAttribute1.name}}" stepKey="seeInDropDown1"/>
        <see selector="{{StorefrontProductInfoMainSection.productAttributeOptions1}}" userInput="{{colorProductAttribute2.name}}" stepKey="seeInDropDown2"/>
        <see selector="{{StorefrontProductInfoMainSection.productAttributeOptions1}}" userInput="{{colorProductAttribute3.name}}" stepKey="seeInDropDown3"/>
        <see selector="{{StorefrontProductInfoMainSection.productAttributeOptions1}}" userInput="{{colorProductAttribute4.name}}" stepKey="seeInDropDown4"/>
    </test>
</tests>
