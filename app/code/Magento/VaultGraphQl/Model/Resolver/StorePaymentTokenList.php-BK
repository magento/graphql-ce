<?php
/**
 * Copyright Â© Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */
declare(strict_types=1);

namespace Magento\VaultGraphQl\Model\Resolver;

use Magento\Authorization\Model\UserContextInterface;
use Magento\Framework\GraphQl\Schema\Type\ResolveInfo;
use Magento\Framework\GraphQl\Config\Element\Field;
use Magento\Framework\GraphQl\Query\ResolverInterface;
use Magento\Framework\GraphQl\Exception\GraphQlAuthorizationException;
use Magento\VaultGraphQl\Model\Resolver\PaymentToken\PaymentTokenDataProvider;
use Magento\Vault\Api\PaymentTokenManagementInterface;
use Magento\Vault\Api\PaymentTokenRepositoryInterface;
use Magento\Vault\Api\Data\PaymentTokenInterface;

use Magento\Framework\GraphQl\Query\Resolver\Argument\SearchCriteria\Builder;

use Magento\Framework\Api\SearchCriteriaBuilder;
use Magento\Framework\Api\FilterBuilder;

/**
 * Store Payment Method List, used for GraphQL request processing.
 */
class StorePaymentTokenList implements ResolverInterface
{
    /**
     * @var SearchCriteriaBuilder
     */
    private $searchCriteriaBuilder;

    /**
     * @var FilterBuilder
     */
    private $filterBuilder;

    /**
     * @var PaymentTokenDataProvider
     */
    private $paymentTokenDataProvider;

    /**
     * @var PaymentTokenManagementInterface
     */
    private $paymentTokenManagementInterface;

    /**
     * @var PaymentTokenRepositoryInterface
     */
    private $paymentTokenRepositoryInterface;

    private $logger;

    /**
     * @param PaymentTokenDataProvider $paymentTokenDataProvider
     * @param PaymentTokenManagementInterface $paymentTokenManagementInterface
     * @param PaymentTokenRepositoryInterface $paymentTokenRepositoryInterface
     * @param Builder $searchCriteriaBuilder
     */
    public function __construct(
        \Psr\Log\LoggerInterface $logger,

        PaymentTokenDataProvider $paymentTokenDataProvider,
        PaymentTokenManagementInterface $paymentTokenManagementInterface,
        PaymentTokenRepositoryInterface $paymentTokenRepositoryInterface,
        SearchCriteriaBuilder $searchCriteriaBuilder,
        FilterBuilder $filterBuilder
    ) {
        $this->logger = $logger;


        $this->paymentTokenDataProvider = $paymentTokenDataProvider;
        $this->paymentTokenManagementInterface = $paymentTokenManagementInterface;
        $this->paymentTokenRepositoryInterface = $paymentTokenRepositoryInterface;

        $this->searchCriteriaBuilder = $searchCriteriaBuilder;
        $this->filterBuilder = $filterBuilder;
    }

    /**
     * @inheritdoc
     */
    public function resolve(
        Field $field,
        $context,
        ResolveInfo $info,
        array $value = null,
        array $args = null
    ) {
        /** @var \Magento\Framework\GraphQl\Query\Resolver\ContextInterface $context */
        if ((!$context->getUserId()) || $context->getUserType() == UserContextInterface::USER_TYPE_GUEST) {
            throw new GraphQlAuthorizationException(
                __(
                    'Current customer does not have access to the resource "%1"',
                    ['store_payment_token']
                )
            );
        }
        if (!isset($args['filter'])) {
            $args['filter'] = [];
        }
        $customerId = $context->getUserId();
        $args['filter'][PaymentTokenInterface::CUSTOMER_ID] = ['eq' => $customerId];

        //$searchCriteria = $this->searchCriteriaBuilder->build($field->getName(), $args['filter']);
        return $this->paymentTokenDataProvider->processPaymentTokens(
            $this->paymentTokenRepositoryInterface->getList($this->generateFilter($args['filter']))->getItems()
        );

        /*
        return $this->paymentTokenDataProvider->processPaymentTokens(
            $this->paymentTokenManagementInterface->getVisibleAvailableTokens($customerId)
        );
        */
    }

    /**
     * @param array $inputFilterArray
     * @return \Magento\Framework\Api\SearchCriteria
     */
    private function generateFilter(array $inputFilterArray)
    {
        $this->logger->critical('message', ['exception' => $inputFilterArray]);
        //$filters = [];
        foreach ($inputFilterArray as $field => $filter) {
            $condition = key($filter);
            $this->logger->critical('field', ['exception' => $field]);
            $this->logger->critical('value', ['exception' => $filter[$condition]]);
            $this->logger->critical('condition', ['exception' => $condition]);
            $filters[] = $this->filterBuilder
                ->setField($field)
                ->setValue($filter)
                ->setConditionType($condition)
                ->create();
            $this->searchCriteriaBuilder->addFilter($field,$filter[$condition],$condition);
        }
        //return $this->searchCriteriaBuilder->addFilters($filters)->create();
        return $this->searchCriteriaBuilder->create();
    }
}